
try to faaa the shadow buffer
I tried this, and I still think it's probably possible, but I'm not sure how because the basic faaa relies on color values and depth values are very different

use texture2DShadow for free stuff including PCF, which I might not want and can disable I think

maybe you can nearest the PCF and optimize it
https://github.com/mrdoob/three.js/issues/15577

interweaved ssao noise for cache efficiency
https://developer.nvidia.com/sites/default/files/akamai/gamedev/docs/BAVOIL_ParticleShadowsAndCacheEfficientPost.pdf

try making ssao texture a power of 2 like 1024x512 and see how that goes

try making various textures sample nearest see how it affects performance and visuals

try making ssao rgba see what happens

try storing normals as half float or less 10 10 2 with reconstruction? idk

try storing position as a half float? it's just used for lighting...

actually if I can reconstruct position from depth is position used for anything at all?

try reconstruting position from depth for more cache hits and f32 depth vs rgba32 for position
for ssao and lighting? if its faster its faster...

allow locking world space resolution for the shadow buffer
locking dimensions would be based on the 3 frustrum dimensions + frustrum diagonal at depth

allow view direction lock for shadow matrix generation

allow light direction lock for shadow matrix generation

only fix world dimensions to direction locked boundaries if both locks are true

shadow map snapping always

would it ever be reasonable to roll the shadow camera to better align with the frustrum, basically minimizing out of bounds or cascaded overlaps

cascaded shadow maps

in the case where shadow pixel snapping is enabled, but you don't have a fixed view direction and fixed shadow direction
we can enable some form of custom scissor testing that limits the shadow pass to the actual frustum aabb in the shadow projection space
however this isn't needed for fat goblins because it's a fixed perspective game

smaa
https://github.com/iryoku/smaa
just smaa, good quality but not as fast
requires at least 3 passes

deferred msaa
https://mynameismjp.wordpress.com/2010/08/16/deferred-msaa/
probably wont antialias solid face colors or hard normals
uses legitimate hardware level subpixel multisampling
interpolates final aliased pixel value based on subpixel depth sampling I think

faaa
https://github.com/grebord/Fast-Adaptive-AA
faster than low quality smaa
much visually better than traditional fxaa, similar to smaa

lxaa
https://github.com/grebord/LXAA-Antialiasing-Shader
based on timothy lottes console fxaa v3
maybe similar speed to fxaa? very low blurring
uses similar edge detesction as faaa but lower quality and faster
